/*
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.uribeacon.scan.util;

import junit.framework.TestCase;

import org.uribeacon.scan.util.RangingUtils;
import org.uribeacon.scan.util.RegionResolver;

/**
 * Unit tests for the {@link org.uribeacon.scan.util.RangingUtils} class.
 */
public class RegionResolverTest extends TestCase {

  public void testResolver() {
    RegionResolver resolver = new RegionResolver();

    final String address = "distance";
    final int calibratedTxPower = -55;

    double chi2Calculated = 0.0;
    double chi2Smoothed = 0.0;

    // chi-squared test
    // chi^2 = SUM((Oi - Ei)^2 / sigma^2)
    int j = 0;
    int len = TEST_DATA.length;
    while (j < len) {
      double measuredDistance = TEST_DATA[j++];
      int rssi = (int) TEST_DATA[j++];

      resolver.onUpdate(address, rssi, calibratedTxPower);

      double rawDistance = RangingUtils.distanceFromRssi(rssi,
              calibratedTxPower);

      double smoothedDistance = resolver.getDistance(address);

      double dr = (rawDistance - measuredDistance);
      chi2Calculated += dr * dr;

      double ds = (smoothedDistance - measuredDistance);
      chi2Smoothed += ds * ds;
    }

    // We want the smoothed estimate to be better than the raw estimate
    assertTrue(chi2Smoothed <= chi2Calculated);
  }

  public void testRegion() {
    RegionResolver resolver = new RegionResolver();

    final String address = "region";
    final int calibratedTxPower = -55;

    int[][] counts = { 
        { 0, 0, 0, 0 }, // near [measured, raw, smooth, smoothHyst]
        { 0, 0, 0, 0 }, // mid [measured, raw, smooth]
        { 0, 0, 0, 0 } }; // far [measured, raw, smooth]

    int j = 0;
    int len = TEST_DATA.length;
    while (j < len) {
      double measuredDistance = TEST_DATA[j++];
      int rssi = (int) TEST_DATA[j++];

      resolver.onUpdate(address, rssi, calibratedTxPower);

      int measuredRegion = RangingUtils.regionFromDistance(measuredDistance);

      double rawDistance = RangingUtils.distanceFromRssi(rssi, 
          calibratedTxPower);

      double smoothedDistance = resolver.getDistance(address);
      int smoothedRegionHyst = resolver.getRegion(address);

      int rawRegion = RangingUtils.regionFromDistance(rawDistance);
      int smoothedRegion = RangingUtils.regionFromDistance(smoothedDistance);

      counts[measuredRegion][0]++;
      counts[measuredRegion][1] += rawRegion == measuredRegion ? 1 : 0;
      counts[measuredRegion][2] += smoothedRegion == measuredRegion ? 1 : 0;
      counts[measuredRegion][3] += smoothedRegionHyst == measuredRegion ? 1 : 0;
    }

    int numRaw = counts[0][1] + counts[1][1] + counts[2][1];
    int numSmoothHyst = counts[0][3] + counts[1][3] + counts[2][3];
    
    // The smoothed-hysteresis filtered regions should be at least as 
    // accurate as the raw un-smoothed computed regions.
    assertTrue(numRaw <= numSmoothHyst);
  }

  private static final double[] TEST_DATA = { 0.0, -28,
    0.0, -26,
    0.0, -27,
    0.0, -28,
    0.0, -27,
    0.0, -28,
    0.0, -27,
    0.0, -28,
    0.0, -28,
    0.0, -28,
    0.0, -28,
    0.0, -28,
    0.0, -28,
    0.0, -28,
    0.0, -28,
    0.25, -44,
    0.25, -45,
    0.25, -45,
    0.25, -45,
    0.25, -45,
    0.25, -45,
    0.25, -44,
    0.25, -44,
    0.25, -45,
    0.25, -44,
    0.25, -45,
    0.25, -44,
    0.25, -45,
    0.25, -44,
    0.25, -44,
    0.25, -45,
    0.5, -48,
    0.5, -49,
    0.5, -49,
    0.5, -49,
    0.5, -49,
    0.5, -48,
    0.5, -49,
    0.5, -49,
    0.5, -49,
    0.5, -50,
    0.5, -49,
    0.5, -49,
    0.5, -49,
    0.5, -49,
    0.5, -49,
    0.5, -50,
    0.75, -54,
    0.75, -51,
    0.75, -51,
    0.75, -54,
    0.75, -54,
    0.75, -50,
    0.75, -50,
    0.75, -51,
    0.75, -50,
    0.75, -54,
    0.75, -50,
    0.75, -54,
    0.75, -51,
    0.75, -50,
    0.75, -51,
    0.75, -51,
    1.0, -54,
    1.0, -55,
    1.0, -54,
    1.0, -53,
    1.0, -56,
    1.0, -53,
    1.0, -54,
    1.0, -54,
    1.0, -55,
    1.0, -55,
    1.0, -54,
    1.0, -54,
    1.0, -54,
    1.0, -55,
    1.0, -54,
    1.0, -54,
    1.25, -56,
    1.25, -56,
    1.25, -56,
    1.25, -57,
    1.25, -57,
    1.25, -56,
    1.25, -56,
    1.25, -57,
    1.25, -57,
    1.25, -57,
    1.25, -57,
    1.25, -57,
    1.25, -56,
    1.25, -57,
    1.25, -57,
    1.25, -57,
    1.5, -59,
    1.5, -57,
    1.5, -58,
    1.5, -57,
    1.5, -58,
    1.5, -58,
    1.5, -60,
    1.5, -60,
    1.5, -60,
    1.5, -59,
    1.5, -58,
    1.5, -60,
    1.5, -60,
    1.5, -58,
    1.5, -60,
    1.5, -58,
    1.75, -58,
    1.75, -59,
    1.75, -58,
    1.75, -58,
    1.75, -59,
    1.75, -59,
    1.75, -58,
    1.75, -58,
    1.75, -58,
    1.75, -58,
    1.75, -58,
    1.75, -59,
    1.75, -58,
    1.75, -59,
    1.75, -58,
    1.75, -58,
    2.0, -58,
    2.0, -58,
    2.0, -62,
    2.0, -58,
    2.0, -58,
    2.0, -62,
    2.0, -58,
    2.0, -61,
    2.0, -59,
    2.0, -58,
    2.0, -58,
    2.0, -58,
    2.0, -58,
    2.0, -58,
    2.0, -58,
    2.0, -62,
    2.25, -63,
    2.25, -62,
    2.25, -63,
    2.25, -64,
    2.25, -64,
    2.25, -64,
    2.25, -64,
    2.25, -64,
    2.25, -64,
    2.25, -61,
    2.25, -61,
    2.25, -61,
    2.25, -63,
    2.25, -64,
    2.25, -64,
    2.25, -61,
    2.5, -59,
    2.5, -63,
    2.5, -59,
    2.5, -63,
    2.5, -63,
    2.5, -60,
    2.5, -61,
    2.5, -60,
    2.5, -60,
    2.5, -61,
    2.5, -60,
    2.5, -61,
    2.5, -63,
    2.5, -61,
    2.5, -60,
    2.5, -61,
    2.75, -63,
    2.75, -64,
    2.75, -63,
    2.75, -62,
    2.75, -64,
    2.75, -64,
    2.75, -64,
    2.75, -62,
    2.75, -64,
    2.75, -64,
    2.75, -62,
    2.75, -64,
    2.75, -62,
    2.75, -64,
    2.75, -64,
    2.75, -62,
    3.0, -64,
    3.0, -73,
    3.0, -77,
    3.0, -75,
    3.0, -76,
    3.0, -64,
    3.0, -62,
    3.0, -76,
    3.0, -75,
    3.0, -75,
    3.0, -64,
    3.0, -64,
    3.0, -64,
    3.0, -77,
    3.0, -62,
    3.0, -76,
    3.25, -59,
    3.25, -60,
    3.25, -60,
    3.25, -62,
    3.25, -62,
    3.25, -60,
    3.25, -62,
    3.25, -62,
    3.25, -62,
    3.25, -60,
    3.25, -62,
    3.25, -60,
    3.25, -62,
    3.25, -60,
    3.25, -61,
    3.25, -60,
    3.5, -72,
    3.5, -62,
    3.5, -62,
    3.5, -71,
    3.5, -72,
    3.5, -72,
    3.5, -61,
    3.5, -71,
    3.5, -61,
    3.5, -61,
    3.5, -72,
    3.5, -62,
    3.5, -62,
    3.5, -70,
    3.5, -62,
    3.5, -70,
    3.75, -66,
    3.75, -63,
    3.75, -64,
    3.75, -66,
    3.75, -66,
    3.75, -65,
    3.75, -64,
    3.75, -66,
    3.75, -64,
    3.75, -63,
    3.75, -63,
    3.75, -63,
    3.75, -63,
    3.75, -63,
    3.75, -64,
    3.75, -66,
    4.0, -70,
    4.0, -64,
    4.0, -66,
    4.0, -68,
    4.0, -70,
    4.0, -68,
    4.0, -66,
    4.0, -66,
    4.0, -66,
    4.0, -67,
    4.0, -64,
    4.0, -70,
    4.0, -70,
    4.0, -64,
    4.0, -64,
    4.0, -70,
    4.25, -65,
    4.25, -62,
    4.25, -68,
    4.25, -67,
    4.25, -68,
    4.25, -64,
    4.25, -67,
    4.25, -68,
    4.25, -62,
    4.25, -68,
    4.25, -64,
    4.25, -68,
    4.25, -62,
    4.25, -64,
    4.25, -64,
    4.25, -63,
    4.5, -59,
    4.5, -64,
    4.5, -89,
    4.5, -91,
    4.5, -87,
    4.5, -59,
    4.5, -60,
    4.5, -84,
    4.5, -87,
    4.5, -63,
    4.5, -91,
    4.5, -63,
    4.5, -60,
    4.5, -60,
    4.5, -63,
    4.5, -60,
    4.75, -65,
    4.75, -71,
    4.75, -62,
    4.75, -62,
    4.75, -66,
    4.75, -62,
    4.75, -62,
    4.75, -62,
    4.75, -70,
    4.75, -62,
    4.75, -62,
    4.75, -66,
    4.75, -65,
    4.75, -70,
    4.75, -65,
    4.75, -65,
    5.0, -63,
    5.0, -64,
    5.0, -74,
    5.0, -67,
    5.0, -68,
    5.0, -74,
    5.0, -75,
    5.0, -76,
    5.0, -76,
    5.0, -68,
    5.0, -76,
    5.0, -64,
    5.0, -76,
    5.0, -67,
    5.0, -76,
    5.0, -76,
    5.25, -71,
    5.25, -75,
    5.25, -74,
    5.25, -69,
    5.25, -66,
    5.25, -69,
    5.25, -66,
    5.25, -69,
    5.25, -70,
    5.25, -70,
    5.25, -75,
    5.25, -66,
    5.25, -66,
    5.25, -70,
    5.25, -73,
    5.25, -73,
    5.5, -75,
    5.5, -71,
    5.5, -74,
    5.5, -71,
    5.5, -72,
    5.5, -70,
    5.5, -72,
    5.5, -70,
    5.5, -71,
    5.5, -69,
    5.5, -73,
    5.5, -72,
    5.5, -70,
    5.5, -70,
    5.5, -72,
    5.5, -75,
    5.75, -66,
    5.75, -65,
    5.75, -65,
    5.75, -79,
    5.75, -80,
    5.75, -65,
    5.75, -65,
    5.75, -65,
    5.75, -65,
    5.75, -65,
    5.75, -68,
    5.75, -77,
    5.75, -79,
    5.75, -68,
    5.75, -65,
    5.75, -64,
    6.0, -66,
    6.0, -77,
    6.0, -72,
    6.0, -67,
    6.0, -75,
    6.0, -67,
    6.0, -72,
    6.0, -77,
    6.0, -72,
    6.0, -67,
    6.0, -67,
    6.0, -73,
    6.0, -74,
    6.0, -72,
    6.0, -77,
    6.0, -72,
    6.25, -76,
    6.25, -66,
    6.25, -68,
    6.25, -68,
    6.25, -66,
    6.25, -65,
    6.25, -66,
    6.25, -68,
    6.25, -75,
    6.25, -66,
    6.25, -66,
    6.25, -68,
    6.25, -68,
    6.25, -75,
    6.25, -65,
    6.25, -76,
    6.5, -64,
    6.5, -67,
    6.5, -64,
    6.5, -66,
    6.5, -64,
    6.5, -68,
    6.5, -67,
    6.5, -67,
    6.5, -64,
    6.5, -67,
    6.5, -68,
    6.5, -68,
    6.5, -67,
    6.5, -67,
    6.5, -68,
    6.5, -67,
    6.75, -74,
    6.75, -77,
    6.75, -75,
    6.75, -76,
    6.75, -71,
    6.75, -68,
    6.75, -67,
    6.75, -72,
    6.75, -75,
    6.75, -70,
    6.75, -75,
    6.75, -71,
    6.75, -70,
    6.75, -77,
    6.75, -71,
    6.75, -67,
    7.0, -68,
    7.0, -64,
    7.0, -64,
    7.0, -64,
    7.0, -69,
    7.0, -67,
    7.0, -64,
    7.0, -70,
    7.0, -68,
    7.0, -70,
    7.0, -68,
    7.0, -70,
    7.0, -68,
    7.0, -64,
    7.0, -69,
    7.0, -70,
    7.25, -77,
    7.25, -70,
    7.25, -81,
    7.25, -70,
    7.25, -70,
    7.25, -70,
    7.25, -65,
    7.25, -69,
    7.25, -81,
    7.25, -65,
    7.25, -88,
    7.25, -70,
    7.25, -88,
    7.25, -70,
    7.25, -64,
    7.25, -83,
    7.5, -66,
    7.5, -66,
    7.5, -66,
    7.5, -88,
    7.5, -90,
    7.5, -70,
    7.5, -69,
    7.5, -71,
    7.5, -66,
    7.5, -66,
    7.5, -71,
    7.5, -70,
    7.5, -90,
    7.5, -67,
    7.5, -86,
    7.5, -66 };
}
